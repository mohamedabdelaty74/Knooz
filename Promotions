{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOg374IPj9E3SD1TM1FqBbs",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mohamedabdelaty74/Knooz/blob/main/Promotions\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Function to process the Excel file and generate the final result\n",
        "def process_excel_file(file_path):\n",
        "    # Load the Excel file\n",
        "    data_alotour = pd.ExcelFile(\"/content/عروض شهر سبتمبر 2024 مالية.xlsx\")\n",
        "\n",
        "    # Load sheets into DataFrames\n",
        "    case1_data = pd.read_excel(\"/content/عروض شهر سبتمبر 2024 مالية.xlsx\", sheet_name='العطور والبخور')\n",
        "\n",
        "    # Filter rows for case1, case1.1, case2, and case2.1\n",
        "    case1_data = case1_data[case1_data['Status'] == 'case1']\n",
        "    case1_1_data = case1_data[case1_data['Status'] == 'case1.1']\n",
        "    case2_data = case1_data[case1_data['Status'] == 'case2']\n",
        "    case2_1_data = case1_data[case1_data['Status'] == 'case2.1']\n",
        "\n",
        "    # Process case1 and case1.1 pairwise combinations (similar logic to case2)\n",
        "    # Case1 and case1.1 already done\n",
        "\n",
        "    # Function to generate pairwise combinations between two cases\n",
        "    def generate_pairwise_combinations(caseA_data, caseB_data, case_label):\n",
        "        combined_codes = []\n",
        "        combined_names = []\n",
        "        combined_prices_before = []\n",
        "        combined_prices_after = []\n",
        "        combined_descriptions = []\n",
        "        case_labels = []\n",
        "\n",
        "        # Iterate over each product in case2 and combine it with each product in case2.1\n",
        "        for product_caseA in caseA_data.itertuples():\n",
        "            for product_caseB in caseB_data.itertuples():\n",
        "                # Combine each product from case2 with each product from case2.1\n",
        "                code_comb = f\"{product_caseA.Internal_Reference}, {product_caseB.Internal_Reference}\"\n",
        "                name_comb = f\"{product_caseA.Product_Name} + {product_caseB.Product_Name}\"\n",
        "                price_before_comb = product_caseA.Price_Before_Discount + product_caseB.Price_Before_Discount\n",
        "                price_after_comb = product_caseA.Price_After_Discount + product_caseB.Price_After_Discount\n",
        "                description_comb = f\"{product_caseA.Description}\"\n",
        "\n",
        "                combined_codes.append(code_comb)\n",
        "                combined_names.append(name_comb)\n",
        "                combined_prices_before.append(price_before_comb)\n",
        "                combined_prices_after.append(price_after_comb)\n",
        "                combined_descriptions.append(description_comb)\n",
        "                case_labels.append(case_label)\n",
        "\n",
        "        # Create a DataFrame for the pairwise combinations\n",
        "        df_pairwise = pd.DataFrame({\n",
        "            'Combined Codes': combined_codes,\n",
        "            'Combined Names': combined_names,\n",
        "            'Combined Price Before Discount': combined_prices_before,\n",
        "            'Combined Price After Discount': combined_prices_after,\n",
        "            'Description': combined_descriptions,\n",
        "            'Case Label': case_labels\n",
        "        })\n",
        "\n",
        "        # Add discount percentage column\n",
        "        df_pairwise['Discount Percentage'] = (\n",
        "            (df_pairwise['Combined Price Before Discount'] - df_pairwise['Combined Price After Discount'])\n",
        "            / df_pairwise['Combined Price Before Discount']\n",
        "        ) * 100\n",
        "\n",
        "        return df_pairwise\n",
        "\n",
        "    # Generate pairwise combinations for case2 and case2.1\n",
        "    case2_combination_df = generate_pairwise_combinations(case2_data, case2_1_data, 'case2 and case2.1')\n",
        "\n",
        "    # Combine everything into one DataFrame\n",
        "    final_combined_df = pd.concat([case1_data, case1_1_data, case2_combination_df], ignore_index=True)\n",
        "\n",
        "    # Save the final result to an Excel file\n",
        "    final_output_path = \"Final_Combined_Sheet.xlsx\"\n",
        "    final_combined_df.to_excel(final_output_path, index=False)\n",
        "\n",
        "    return final_output_path\n",
        "\n",
        "# Example usage:\n",
        "file_path = \"your_file_path.xlsx\"  # Replace with the path to your Excel file\n",
        "output_path = process_excel_file(file_path)\n",
        "print(f\"Final result saved to: {output_path}\")\n"
      ],
      "metadata": {
        "id": "Ezutj3vSACsd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0f82fbd2-89dc-4c66-dc2a-11f98dfd1b69"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Final result saved to: Final_Combined_Sheet.xlsx\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Iterate through case1 and case1.1 products correctly\n",
        "for product_case1 in case1_data.itertuples():\n",
        "    for product_case1_1 in case1_1_data.itertuples():\n",
        "        # Combine each product\n",
        "        combined_code = f\"{product_case1.Internal_Reference}, {product_case1_1.Internal_Reference}\"\n",
        "        print(combined_code)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        },
        "id": "35uewCZ5AOpE",
        "outputId": "68b5b96c-1d49-4ede-a969-c52fbfafe1af"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'case1_data' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-5-3578be1f0668>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Iterate through case1 and case1.1 products correctly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mproduct_case1\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcase1_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitertuples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mproduct_case1_1\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcase1_1_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitertuples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m         \u001b[0;31m# Combine each product\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0mcombined_code\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"{product_case1.Internal_Reference}, {product_case1_1.Internal_Reference}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'case1_data' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Function to process the Excel file and generate the final result\n",
        "def process_excel_file(file_path):\n",
        "    # Load the Excel file\n",
        "    data = pd.read_excel(\"/content/عروض شهر سبتمبر 2024 مالية.xlsx\", sheet_name='العطور والبخور')  # Load the correct sheet\n",
        "\n",
        "    # Filter rows for case1, case1.1, case2, and case2.1\n",
        "    case1_data = data[data['Status'] == 'case1']\n",
        "    case1_1_data = data[data['Status'] == 'case1.1']\n",
        "    case2_data = data[data['Status'] == 'case2']\n",
        "    case2_1_data = data[data['Status'] == 'case2.1']\n",
        "\n",
        "    # Function to generate pairwise combinations between two cases\n",
        "    def generate_pairwise_combinations(caseA_data, caseB_data, case_label):\n",
        "        combined_codes = []\n",
        "        combined_names = []\n",
        "        combined_prices_before = []\n",
        "        combined_prices_after = []\n",
        "        combined_descriptions = []\n",
        "        case_labels = []\n",
        "\n",
        "        # Iterate over each product in caseA and combine it with each product in caseB\n",
        "        for product_caseA in caseA_data.itertuples():\n",
        "            for product_caseB in caseB_data.itertuples():\n",
        "                # Combine each product from caseA with each product from caseB\n",
        "                code_comb = f\"{product_caseA._asdict()['مرجع داخلي']}, {product_caseB._asdict()['مرجع داخلي']}\"\n",
        "                name_comb = f\"{product_caseA._asdict()['الاسم']} + {product_caseB._asdict()['الاسم']}\"\n",
        "                price_before_comb = product_caseA._asdict()['السعر قبل الخصم ش ض'] + product_caseB._asdict()['السعر قبل الخصم ش ض']\n",
        "                price_after_comb = product_caseA._asdict()['السعر بعد الخصم ش ض'] + product_caseB._asdict()['السعر بعد الخصم ش ض']\n",
        "                description_comb = f\"{product_caseA._asdict()['الوصف']}\"\n",
        "\n",
        "                combined_codes.append(code_comb)\n",
        "                combined_names.append(name_comb)\n",
        "                combined_prices_before.append(price_before_comb)\n",
        "                combined_prices_after.append(price_after_comb)\n",
        "                combined_descriptions.append(description_comb)\n",
        "                case_labels.append(case_label)\n",
        "\n",
        "        # Create a DataFrame for the pairwise combinations\n",
        "        df_pairwise = pd.DataFrame({\n",
        "            'Combined Codes': combined_codes,\n",
        "            'Combined Names': combined_names,\n",
        "            'Combined Price Before Discount': combined_prices_before,\n",
        "            'Combined Price After Discount': combined_prices_after,\n",
        "            'Description': combined_descriptions,\n",
        "            'Case Label': case_labels\n",
        "        })\n",
        "\n",
        "        # Add discount percentage column\n",
        "        df_pairwise['Discount Percentage'] = (\n",
        "            (df_pairwise['Combined Price Before Discount'] - df_pairwise['Combined Price After Discount'])\n",
        "            / df_pairwise['Combined Price Before Discount']\n",
        "        ) * 100\n",
        "\n",
        "        return df_pairwise\n",
        "\n",
        "    # Generate pairwise combinations for case1 and case1.1\n",
        "    case1_combination_df = generate_pairwise_combinations(case1_data, case1_1_data, 'case1 and case1.1')\n",
        "\n",
        "    # Generate pairwise combinations for case2 and case2.1\n",
        "    case2_combination_df = generate_pairwise_combinations(case2_data, case2_1_data, 'case2 and case2.1')\n",
        "\n",
        "    # Combine everything into one DataFrame\n",
        "    final_combined_df = pd.concat([case1_combination_df, case2_combination_df], ignore_index=True)\n",
        "\n",
        "    # Save the final result to an Excel file\n",
        "    final_output_path = \"Final_Combined_Sheet.xlsx\"\n",
        "    final_combined_df.to_excel(final_output_path, index=False)\n",
        "\n",
        "    return final_output_path\n",
        "\n",
        "# Example usage:\n",
        "file_path = \"/content/your_file_name.xlsx\"  # Replace with the path to your Excel file\n",
        "output_path = process_excel_file(file_path)\n",
        "print(f\"Final result saved to: {output_path}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "id": "1Shh_JKbv6b0",
        "outputId": "c2d88dbc-9ad4-4959-bbe3-951525468af0"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "'مرجع داخلي'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-1235bdb5fe6f>\u001b[0m in \u001b[0;36m<cell line: 75>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     73\u001b[0m \u001b[0;31m# Example usage:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[0mfile_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/content/your_file_name.xlsx\"\u001b[0m  \u001b[0;31m# Replace with the path to your Excel file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 75\u001b[0;31m \u001b[0moutput_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocess_excel_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     76\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Final result saved to: {output_path}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-8-1235bdb5fe6f>\u001b[0m in \u001b[0;36mprocess_excel_file\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     57\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0;31m# Generate pairwise combinations for case1 and case1.1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m     \u001b[0mcase1_combination_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgenerate_pairwise_combinations\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcase1_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcase1_1_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'case1 and case1.1'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;31m# Generate pairwise combinations for case2 and case2.1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-8-1235bdb5fe6f>\u001b[0m in \u001b[0;36mgenerate_pairwise_combinations\u001b[0;34m(caseA_data, caseB_data, case_label)\u001b[0m\n\u001b[1;32m     25\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mproduct_caseB\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcaseB_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitertuples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m                 \u001b[0;31m# Combine each product from caseA with each product from caseB\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m                 \u001b[0mcode_comb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"{product_caseA._asdict()['مرجع داخلي']}, {product_caseB._asdict()['مرجع داخلي']}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m                 \u001b[0mname_comb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"{product_caseA._asdict()['الاسم']} + {product_caseB._asdict()['الاسم']}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m                 \u001b[0mprice_before_comb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mproduct_caseA\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_asdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'السعر قبل الخصم ش ض'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mproduct_caseB\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_asdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'السعر قبل الخصم ش ض'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'مرجع داخلي'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the Excel file and print the column names\n",
        "file_path = \"/content/عروض شهر سبتمبر 2024 مالية.xlsx\"  # Replace with your file path\n",
        "data = pd.read_excel(file_path, sheet_name='العطور والبخور')  # Replace with your sheet name\n",
        "\n",
        "# Print the column names\n",
        "print(data.columns)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ePhNnGXswY4a",
        "outputId": "ac9334e7-8aae-44d6-8f38-2ec4ce4322f8"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Status', 'مرجع داخلي', 'الاسم', 'السعر قبل الخصم ش.ض', 'الوصف',\n",
            "       'السعر بعد الخصم ش.ض'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Function to process the Excel file and generate the final result\n",
        "def process_excel_file(file_path):\n",
        "    # Load the Excel file\n",
        "    data = pd.read_excel(file_path, sheet_name='العطور والبخور')  # Load the correct sheet\n",
        "\n",
        "    # Filter rows for case1, case1.1, case2, and case2.1\n",
        "    case1_data = data[data['Status'] == 'case1']\n",
        "    case1_1_data = data[data['Status'] == 'case1.1']\n",
        "    case2_data = data[data['Status'] == 'case2']\n",
        "    case2_1_data = data[data['Status'] == 'case2.1']\n",
        "\n",
        "    # Function to generate pairwise combinations between two cases\n",
        "    def generate_pairwise_combinations(caseA_data, caseB_data, case_label):\n",
        "        combined_codes = []\n",
        "        combined_names = []\n",
        "        combined_prices_before = []\n",
        "        combined_prices_after = []\n",
        "        combined_descriptions = []\n",
        "        case_labels = []\n",
        "\n",
        "        # Iterate over each product in caseA and combine it with each product in caseB\n",
        "        for product_caseA in caseA_data.itertuples():\n",
        "            for product_caseB in caseB_data.itertuples():\n",
        "                # Combine each product from caseA with each product from caseB using exact column names\n",
        "                code_comb = f\"{product_caseA._asdict()['مرجع داخلي']}, {product_caseB._asdict()['مرجع داخلي']}\"\n",
        "                name_comb = f\"{product_caseA._asdict()['الاسم']} + {product_caseB._asdict()['الاسم']}\"\n",
        "                price_before_comb = product_caseA._asdict()['السعر قبل الخصم ش.ض'] + product_caseB._asdict()['السعر قبل الخصم ش.ض']\n",
        "                price_after_comb = product_caseA._asdict()['السعر بعد الخصم ش.ض'] + product_caseB._asdict()['السعر بعد الخصم ش.ض']\n",
        "                description_comb = f\"{product_caseA._asdict()['الوصف']}\"\n",
        "\n",
        "                combined_codes.append(code_comb)\n",
        "                combined_names.append(name_comb)\n",
        "                combined_prices_before.append(price_before_comb)\n",
        "                combined_prices_after.append(price_after_comb)\n",
        "                combined_descriptions.append(description_comb)\n",
        "                case_labels.append(case_label)\n",
        "\n",
        "        # Create a DataFrame for the pairwise combinations\n",
        "        df_pairwise = pd.DataFrame({\n",
        "            'Combined Codes': combined_codes,\n",
        "            'Combined Names': combined_names,\n",
        "            'Combined Price Before Discount': combined_prices_before,\n",
        "            'Combined Price After Discount': combined_prices_after,\n",
        "            'Description': combined_descriptions,\n",
        "            'Case Label': case_labels\n",
        "        })\n",
        "\n",
        "        # Add discount percentage column\n",
        "        df_pairwise['Discount Percentage'] = (\n",
        "            (df_pairwise['Combined Price Before Discount'] - df_pairwise['Combined Price After Discount'])\n",
        "            / df_pairwise['Combined Price Before Discount']\n",
        "        ) * 100\n",
        "\n",
        "        return df_pairwise\n",
        "\n",
        "    # Generate pairwise combinations for case1 and case1.1\n",
        "    case1_combination_df = generate_pairwise_combinations(case1_data, case1_1_data, 'case1 and case1.1')\n",
        "\n",
        "    # Generate pairwise combinations for case2 and case2.1\n",
        "    case2_combination_df = generate_pairwise_combinations(case2_data, case2_1_data, 'case2 and case2.1')\n",
        "\n",
        "    # Combine everything into one DataFrame\n",
        "    final_combined_df = pd.concat([case1_combination_df, case2_combination_df], ignore_index=True)\n",
        "\n",
        "    # Save the final result to an Excel file\n",
        "    final_output_path = \"Final_Combined_Sheet.xlsx\"\n",
        "    final_combined_df.to_excel(final_output_path, index=False)\n",
        "\n",
        "    return final_output_path\n",
        "\n",
        "# Example usage:\n",
        "file_path = \"/content/عروض شهر سبتمبر 2024 مالية.xlsx\"  # Replace with the path to your Excel file\n",
        "output_path = process_excel_file(file_path)\n",
        "print(f\"Final result saved to: {output_path}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "odvV7SGHxGYt",
        "outputId": "735b25ea-1877-4bde-e58d-394260d873c3"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "'مرجع داخلي'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-11-d248df2c7ce7>\u001b[0m in \u001b[0;36m<cell line: 75>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     73\u001b[0m \u001b[0;31m# Example usage:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[0mfile_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/content/عروض شهر سبتمبر 2024 مالية.xlsx\"\u001b[0m  \u001b[0;31m# Replace with the path to your Excel file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 75\u001b[0;31m \u001b[0moutput_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocess_excel_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     76\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Final result saved to: {output_path}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-11-d248df2c7ce7>\u001b[0m in \u001b[0;36mprocess_excel_file\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     57\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0;31m# Generate pairwise combinations for case1 and case1.1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m     \u001b[0mcase1_combination_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgenerate_pairwise_combinations\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcase1_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcase1_1_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'case1 and case1.1'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;31m# Generate pairwise combinations for case2 and case2.1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-11-d248df2c7ce7>\u001b[0m in \u001b[0;36mgenerate_pairwise_combinations\u001b[0;34m(caseA_data, caseB_data, case_label)\u001b[0m\n\u001b[1;32m     25\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mproduct_caseB\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcaseB_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitertuples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m                 \u001b[0;31m# Combine each product from caseA with each product from caseB using exact column names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m                 \u001b[0mcode_comb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"{product_caseA._asdict()['مرجع داخلي']}, {product_caseB._asdict()['مرجع داخلي']}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m                 \u001b[0mname_comb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"{product_caseA._asdict()['الاسم']} + {product_caseB._asdict()['الاسم']}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m                 \u001b[0mprice_before_comb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mproduct_caseA\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_asdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'السعر قبل الخصم ش.ض'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mproduct_caseB\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_asdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'السعر قبل الخصم ش.ض'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'مرجع داخلي'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Function to process the Excel file and generate the final result\n",
        "def process_excel_file(file_path):\n",
        "    # Load the Excel file\n",
        "    data = pd.read_excel(file_path, sheet_name='العطور والبخور')  # Load the correct sheet\n",
        "\n",
        "    # Filter rows for case1, case1.1, case2, and case2.1\n",
        "    case1_data = data[data['Status'] == 'case1']\n",
        "    case1_1_data = data[data['Status'] == 'case1.1']\n",
        "    case2_data = data[data['Status'] == 'case2']\n",
        "    case2_1_data = data[data['Status'] == 'case2.1']\n",
        "\n",
        "    # Function to generate pairwise combinations between two cases\n",
        "    def generate_pairwise_combinations(caseA_data, caseB_data, case_label):\n",
        "        combined_codes = []\n",
        "        combined_names = []\n",
        "        combined_prices_before = []\n",
        "        combined_prices_after = []\n",
        "        combined_descriptions = []\n",
        "        case_labels = []\n",
        "\n",
        "        # Iterate over each product in caseA and combine it with each product in caseB\n",
        "        for _, product_caseA in caseA_data.iterrows():\n",
        "            for _, product_caseB in caseB_data.iterrows():\n",
        "                # Combine each product from caseA with each product from caseB using exact column names\n",
        "                code_comb = f\"{product_caseA['مرجع داخلي']}, {product_caseB['مرجع داخلي']}\"\n",
        "                name_comb = f\"{product_caseA['الاسم']} + {product_caseB['الاسم']}\"\n",
        "                price_before_comb = product_caseA['السعر قبل الخصم ش.ض'] + product_caseB['السعر قبل الخصم ش.ض']\n",
        "                price_after_comb = product_caseA['السعر بعد الخصم ش.ض'] + product_caseB['السعر بعد الخصم ش.ض']\n",
        "                description_comb = f\"{product_caseA['الوصف']}\"\n",
        "\n",
        "                combined_codes.append(code_comb)\n",
        "                combined_names.append(name_comb)\n",
        "                combined_prices_before.append(price_before_comb)\n",
        "                combined_prices_after.append(price_after_comb)\n",
        "                combined_descriptions.append(description_comb)\n",
        "                case_labels.append(case_label)\n",
        "\n",
        "        # Create a DataFrame for the pairwise combinations\n",
        "        df_pairwise = pd.DataFrame({\n",
        "            'Combined Codes': combined_codes,\n",
        "            'Combined Names': combined_names,\n",
        "            'Combined Price Before Discount': combined_prices_before,\n",
        "            'Combined Price After Discount': combined_prices_after,\n",
        "            'Description': combined_descriptions,\n",
        "            'Case Label': case_labels\n",
        "        })\n",
        "\n",
        "        # Add discount percentage column\n",
        "        df_pairwise['Discount Percentage'] = (\n",
        "            (df_pairwise['Combined Price Before Discount'] - df_pairwise['Combined Price After Discount'])\n",
        "            / df_pairwise['Combined Price Before Discount']\n",
        "        ) * 100\n",
        "\n",
        "        return df_pairwise\n",
        "\n",
        "    # Generate pairwise combinations for case1 and case1.1\n",
        "    case1_combination_df = generate_pairwise_combinations(case1_data, case1_1_data, 'case1 and case1.1')\n",
        "\n",
        "    # Generate pairwise combinations for case2 and case2.1\n",
        "    case2_combination_df = generate_pairwise_combinations(case2_data, case2_1_data, 'case2 and case2.1')\n",
        "\n",
        "    # Combine everything into one DataFrame\n",
        "    final_combined_df = pd.concat([case1_combination_df, case2_combination_df], ignore_index=True)\n",
        "\n",
        "    # Save the final result to an Excel file\n",
        "    final_output_path = \"Final_Combined_Sheet.xlsx\"\n",
        "    final_combined_df.to_excel(final_output_path, index=False)\n",
        "\n",
        "    return final_output_path\n",
        "\n",
        "# Example usage:\n",
        "file_path = \"/content/عروض شهر سبتمبر 2024 مالية.xlsx\"  # Replace with the path to your Excel file\n",
        "output_path = process_excel_file(file_path)\n",
        "print(f\"Final result saved to: {output_path}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "thN5gneExvsu",
        "outputId": "2746b3b5-dd73-447f-ba8b-44274db631ad"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Final result saved to: Final_Combined_Sheet.xlsx\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Function to process the Excel file and generate the final result\n",
        "def process_excel_file(file_path):\n",
        "    # Load the Excel file\n",
        "    data = pd.read_excel(file_path, sheet_name='العطور والبخور')  # Load the correct sheet\n",
        "\n",
        "    # Filter rows for case1, case1.1, case2, and case2.1\n",
        "    case1_data = data[data['Status'] == 'case1']\n",
        "    case1_1_data = data[data['Status'] == 'case1.1']\n",
        "    case2_data = data[data['Status'] == 'case2']\n",
        "    case2_1_data = data[data['Status'] == 'case2.1']\n",
        "\n",
        "    # Function to generate pairwise combinations between two cases\n",
        "    def generate_pairwise_combinations(caseA_data, caseB_data, case_label):\n",
        "        combined_codes = []\n",
        "        combined_names = []\n",
        "        combined_prices_before = []\n",
        "        combined_prices_after = []\n",
        "        combined_descriptions = []\n",
        "        case_labels = []\n",
        "\n",
        "        # Iterate over each product in caseA and combine it with each product in caseB\n",
        "        for _, product_caseA in caseA_data.iterrows():\n",
        "            for _, product_caseB in caseB_data.iterrows():\n",
        "                # Combine each product from caseA with each product from caseB using exact column names\n",
        "                code_comb = f\"{product_caseA['مرجع داخلي']}, {product_caseB['مرجع داخلي']}\"\n",
        "                name_comb = f\"{product_caseA['الاسم']} + {product_caseB['الاسم']}\"\n",
        "                price_before_comb = product_caseA['السعر قبل الخصم ش.ض'] + product_caseB['السعر قبل الخصم ش.ض']\n",
        "                price_after_comb = product_caseA['السعر بعد الخصم ش.ض'] + product_caseB['السعر بعد الخصم ش.ض']\n",
        "                description_comb = f\"{product_caseA['الوصف']}\"\n",
        "\n",
        "                combined_codes.append(code_comb)\n",
        "                combined_names.append(name_comb)\n",
        "                combined_prices_before.append(price_before_comb)\n",
        "                combined_prices_after.append(price_after_comb)\n",
        "                combined_descriptions.append(description_comb)\n",
        "                case_labels.append(case_label)\n",
        "\n",
        "        # Create a DataFrame for the pairwise combinations\n",
        "        df_pairwise = pd.DataFrame({\n",
        "            'Combined Codes': combined_codes,\n",
        "            'Combined Names': combined_names,\n",
        "            'Combined Price Before Discount': combined_prices_before,\n",
        "            'Combined Price After Discount': combined_prices_after,\n",
        "            'Description': combined_descriptions,\n",
        "            'Case Label': case_labels\n",
        "        })\n",
        "\n",
        "        # Add discount percentage column\n",
        "        df_pairwise['Discount Percentage'] = (\n",
        "            (df_pairwise['Combined Price Before Discount'] - df_pairwise['Combined Price After Discount'])\n",
        "            / df_pairwise['Combined Price Before Discount']\n",
        "        ) * 100\n",
        "\n",
        "        return df_pairwise\n",
        "\n",
        "    # No combinations for case1 and case1.1, show them separately\n",
        "    case1_combination_df = case1_data.copy()\n",
        "    case1_combination_df['Combined Codes'] = case1_combination_df['مرجع داخلي']\n",
        "    case1_combination_df['Combined Names'] = case1_combination_df['الاسم']\n",
        "    case1_combination_df['Combined Price Before Discount'] = case1_combination_df['السعر قبل الخصم ش.ض']\n",
        "    case1_combination_df['Combined Price After Discount'] = case1_combination_df['السعر بعد الخصم ش.ض']\n",
        "    case1_combination_df['Description'] = case1_combination_df['الوصف']\n",
        "    case1_combination_df['Case Label'] = 'case1'\n",
        "\n",
        "    case1_1_combination_df = case1_1_data.copy()\n",
        "    case1_1_combination_df['Combined Codes'] = case1_1_combination_df['مرجع داخلي']\n",
        "    case1_1_combination_df['Combined Names'] = case1_1_combination_df['الاسم']\n",
        "    case1_1_combination_df['Combined Price Before Discount'] = case1_1_combination_df['السعر قبل الخصم ش.ض']\n",
        "    case1_1_combination_df['Combined Price After Discount'] = case1_1_combination_df['السعر بعد الخصم ش.ض']\n",
        "    case1_1_combination_df['Description'] = case1_1_combination_df['الوصف']\n",
        "    case1_1_combination_df['Case Label'] = 'case1.1'\n",
        "\n",
        "    # Generate pairwise combinations only for case2 and case2.1\n",
        "    case2_combination_df = generate_pairwise_combinations(case2_data, case2_1_data, 'case2 and case2.1')\n",
        "\n",
        "    # Combine everything into one DataFrame\n",
        "    final_combined_df = pd.concat([case1_combination_df, case1_1_combination_df, case2_combination_df], ignore_index=True)\n",
        "\n",
        "    # Save the final result to an Excel file\n",
        "    final_output_path = \"Final_Combined_Sheet.xlsx\"\n",
        "    final_combined_df.to_excel(final_output_path, index=False)\n",
        "\n",
        "    return final_output_path\n",
        "\n",
        "# Example usage:\n",
        "file_path = \"//content/عروض شهر سبتمبر 2024 مالية.xlsx\"  # Replace with the path to your Excel file\n",
        "output_path = process_excel_file(file_path)\n",
        "print(f\"Final result saved to: {output_path}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7rbQlENSx0cb",
        "outputId": "ea48ef21-2a46-4808-9802-8f596ce5b774"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Final result saved to: Final_Combined_Sheet.xlsx\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Function to process the Excel file and generate the final result\n",
        "def process_excel_file(file_path):\n",
        "    # Load the Excel file\n",
        "    data = pd.read_excel(file_path, sheet_name='العطور والبخور')  # Load the correct sheet\n",
        "\n",
        "    # Filter rows for case1, case1.1, case2, and case2.1\n",
        "    case1_data = data[data['Status'] == 'case1']\n",
        "    case1_1_data = data[data['Status'] == 'case1.1']\n",
        "    case2_data = data[data['Status'] == 'case2']\n",
        "    case2_1_data = data[data['Status'] == 'case2.1']\n",
        "\n",
        "    # Function to generate pairwise combinations within the same group\n",
        "    def generate_pairwise_combinations_within_group(case_data, case_label):\n",
        "        combined_codes = []\n",
        "        combined_names = []\n",
        "        combined_prices_before = []\n",
        "        combined_prices_after = []\n",
        "        combined_descriptions = []\n",
        "        case_labels = []\n",
        "\n",
        "        # Iterate over each product in case_data and combine it with every other product in the same case_data\n",
        "        for _, product_caseA in case_data.iterrows():\n",
        "            for _, product_caseB in case_data.iterrows():\n",
        "                # Combine each product from caseA with each product from caseB (same case)\n",
        "                code_comb = f\"{product_caseA['مرجع داخلي']}, {product_caseB['مرجع داخلي']}\"\n",
        "                name_comb = f\"{product_caseA['الاسم']} + {product_caseB['الاسم']}\"\n",
        "                price_before_comb = product_caseA['السعر قبل الخصم ش.ض'] + product_caseB['السعر قبل الخصم ش.ض']\n",
        "                price_after_comb = product_caseA['السعر بعد الخصم ش.ض'] + product_caseB['السعر بعد الخصم ش.ض']\n",
        "                description_comb = f\"{product_caseA['الوصف']}\"\n",
        "\n",
        "                combined_codes.append(code_comb)\n",
        "                combined_names.append(name_comb)\n",
        "                combined_prices_before.append(price_before_comb)\n",
        "                combined_prices_after.append(price_after_comb)\n",
        "                combined_descriptions.append(description_comb)\n",
        "                case_labels.append(case_label)\n",
        "\n",
        "        # Create a DataFrame for the pairwise combinations\n",
        "        df_pairwise = pd.DataFrame({\n",
        "            'Combined Codes': combined_codes,\n",
        "            'Combined Names': combined_names,\n",
        "            'Combined Price Before Discount': combined_prices_before,\n",
        "            'Combined Price After Discount': combined_prices_after,\n",
        "            'Description': combined_descriptions,\n",
        "            'Case Label': case_labels\n",
        "        })\n",
        "\n",
        "        # Add discount percentage column\n",
        "        df_pairwise['Discount Percentage'] = (\n",
        "            (df_pairwise['Combined Price Before Discount'] - df_pairwise['Combined Price After Discount'])\n",
        "            / df_pairwise['Combined Price Before Discount']\n",
        "        ) * 100\n",
        "\n",
        "        return df_pairwise\n",
        "\n",
        "    # Generate pairwise combinations for case1 within itself\n",
        "    case1_combination_df = generate_pairwise_combinations_within_group(case1_data, 'case1')\n",
        "\n",
        "    # Generate pairwise combinations for case1.1 within itself\n",
        "    case1_1_combination_df = generate_pairwise_combinations_within_group(case1_1_data, 'case1.1')\n",
        "\n",
        "    # Generate pairwise combinations between case2 and case2.1\n",
        "    case2_combination_df = generate_pairwise_combinations_within_group(case2_data, 'case2 and case2.1')\n",
        "\n",
        "    # Combine everything into one DataFrame\n",
        "    final_combined_df = pd.concat([case1_combination_df, case1_1_combination_df, case2_combination_df], ignore_index=True)\n",
        "\n",
        "    # Save the final result to an Excel file\n",
        "    final_output_path = \"Final_Combined_Sheet.xlsx\"\n",
        "    final_combined_df.to_excel(final_output_path, index=False)\n",
        "\n",
        "    return final_output_path\n",
        "\n",
        "# Example usage:\n",
        "file_path = \"/content/عروض شهر سبتمبر 2024 مالية.xlsx\"  # Replace with the path to your Excel file\n",
        "output_path = process_excel_file(file_path)\n",
        "print(f\"Final result saved to: {output_path}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1xAMiplJ0U5z",
        "outputId": "adfdbba8-9371-41b3-f66b-ff02977a17e0"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Final result saved to: Final_Combined_Sheet.xlsx\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Function to process the Excel file and generate the final result\n",
        "def process_excel_file(file_path):\n",
        "    # Load the Excel file\n",
        "    data = pd.read_excel(file_path, sheet_name='العطور والبخور')  # Load the correct sheet\n",
        "\n",
        "    # Filter rows for case1, case1.1, case2, and case2.1\n",
        "    case1_data = data[data['Status'] == 'case1']\n",
        "    case1_1_data = data[data['Status'] == 'case1.1']\n",
        "    case2_data = data[data['Status'] == 'case2']\n",
        "    case2_1_data = data[data['Status'] == 'case2.1']\n",
        "\n",
        "    # Function to generate pairwise combinations within or between groups\n",
        "    def generate_pairwise_combinations(caseA_data, caseB_data, case_label):\n",
        "        combined_codes = []\n",
        "        combined_names = []\n",
        "        combined_prices_before = []\n",
        "        combined_prices_after = []\n",
        "        combined_descriptions = []\n",
        "        case_labels = []\n",
        "\n",
        "        # Iterate over each product in caseA and combine it with each product in caseB\n",
        "        for _, product_caseA in caseA_data.iterrows():\n",
        "            for _, product_caseB in caseB_data.iterrows():\n",
        "                # Combine each product from caseA with each product from caseB\n",
        "                code_comb = f\"{product_caseA['مرجع داخلي']}, {product_caseB['مرجع داخلي']}\"\n",
        "                name_comb = f\"{product_caseA['الاسم']} + {product_caseB['الاسم']}\"\n",
        "                price_before_comb = product_caseA['السعر قبل الخصم ش.ض'] + product_caseB['السعر قبل الخصم ش.ض']\n",
        "                price_after_comb = product_caseA['السعر بعد الخصم ش.ض'] + product_caseB['السعر بعد الخصم ش.ض']\n",
        "                description_comb = f\"{product_caseA['الوصف']} + {product_caseB['الوصف']}\"\n",
        "\n",
        "                combined_codes.append(code_comb)\n",
        "                combined_names.append(name_comb)\n",
        "                combined_prices_before.append(price_before_comb)\n",
        "                combined_prices_after.append(price_after_comb)\n",
        "                combined_descriptions.append(description_comb)\n",
        "                case_labels.append(case_label)\n",
        "\n",
        "        # Create a DataFrame for the pairwise combinations\n",
        "        df_pairwise = pd.DataFrame({\n",
        "            'Combined Codes': combined_codes,\n",
        "            'Combined Names': combined_names,\n",
        "            'Combined Price Before Discount': combined_prices_before,\n",
        "            'Combined Price After Discount': combined_prices_after,\n",
        "            'Description': combined_descriptions,\n",
        "            'Case Label': case_labels\n",
        "        })\n",
        "\n",
        "        # Add discount percentage column\n",
        "        df_pairwise['Discount Percentage'] = (\n",
        "            (df_pairwise['Combined Price Before Discount'] - df_pairwise['Combined Price After Discount'])\n",
        "            / df_pairwise['Combined Price Before Discount']\n",
        "        ) * 100\n",
        "\n",
        "        return df_pairwise\n",
        "\n",
        "    # Generate pairwise combinations for case1 within itself\n",
        "    case1_combination_df = generate_pairwise_combinations(case1_data, case1_data, 'case1')\n",
        "\n",
        "    # Generate pairwise combinations for case1.1 within itself\n",
        "    case1_1_combination_df = generate_pairwise_combinations(case1_1_data, case1_1_data, 'case1.1')\n",
        "\n",
        "    # Generate pairwise combinations between case2 and case2.1\n",
        "    case2_combination_df = generate_pairwise_combinations(case2_data, case2_1_data, 'case2 and case2.1')\n",
        "\n",
        "    # Combine everything into one DataFrame\n",
        "    final_combined_df = pd.concat([case1_combination_df, case1_1_combination_df, case2_combination_df], ignore_index=True)\n",
        "\n",
        "    # Save the final result to an Excel file\n",
        "    final_output_path = \"Final_Combined_Sheet.xlsx\"\n",
        "    final_combined_df.to_excel(final_output_path, index=False)\n",
        "\n",
        "    return final_output_path\n",
        "\n",
        "# Example usage:\n",
        "file_path = \"/content/عروض شهر سبتمبر 2024 مالية.xlsx\"  # Replace with the path to your Excel file\n",
        "output_path = process_excel_file(file_path)\n",
        "print(f\"Final result saved to: {output_path}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OcqcCBQW1ozk",
        "outputId": "702b7bfa-10ee-4f69-a4ce-9d009f39fd32"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Final result saved to: Final_Combined_Sheet.xlsx\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from itertools import combinations\n",
        "\n",
        "# Function to process the Excel file and generate the final result\n",
        "def process_excel_file(file_path):\n",
        "    # Load the Excel file\n",
        "    data = pd.read_excel(file_path, sheet_name='العطور والبخور')  # Load the correct sheet\n",
        "\n",
        "    # Filter rows for case1, case1.1, case2, and case2.1\n",
        "    case1_data = data[data['Status'] == 'case1']\n",
        "    case1_1_data = data[data['Status'] == 'case1.1']\n",
        "    case2_data = data[data['Status'] == 'case2']\n",
        "    case2_1_data = data[data['Status'] == 'case2.1']\n",
        "\n",
        "    # Function to generate pairwise combinations without repetition\n",
        "    def generate_pairwise_combinations_no_repetition(caseA_data, caseB_data, case_label, allow_self_combine=False):\n",
        "        combined_codes = []\n",
        "        combined_names = []\n",
        "        combined_prices_before = []\n",
        "        combined_prices_after = []\n",
        "        combined_descriptions = []\n",
        "        case_labels = []\n",
        "\n",
        "        # Get all unique pair combinations (no repetition like A,B and B,A or self-combination unless allowed)\n",
        "        if caseA_data.equals(caseB_data) and not allow_self_combine:\n",
        "            pairs = combinations(caseA_data.iterrows(), 2)\n",
        "        else:\n",
        "            pairs = [(rowA, rowB) for _, rowA in caseA_data.iterrows() for _, rowB in caseB_data.iterrows()]\n",
        "\n",
        "        # Iterate over each unique product pair and combine them\n",
        "        for (idxA, product_caseA), (idxB, product_caseB) in pairs:\n",
        "            # Combine each product from caseA with each product from caseB\n",
        "            code_comb = f\"{product_caseA['مرجع داخلي']}, {product_caseB['مرجع داخلي']}\"\n",
        "            name_comb = f\"{product_caseA['الاسم']} + {product_caseB['الاسم']}\"\n",
        "            price_before_comb = product_caseA['السعر قبل الخصم ش.ض'] + product_caseB['السعر قبل الخصم ش.ض']\n",
        "            price_after_comb = product_caseA['السعر بعد الخصم ش.ض'] + product_caseB['السعر بعد الخصم ش.ض']\n",
        "            description_comb = f\"{product_caseA['الوصف']} + {product_caseB['الوصف']}\"\n",
        "\n",
        "            combined_codes.append(code_comb)\n",
        "            combined_names.append(name_comb)\n",
        "            combined_prices_before.append(price_before_comb)\n",
        "            combined_prices_after.append(price_after_comb)\n",
        "            combined_descriptions.append(description_comb)\n",
        "            case_labels.append(case_label)\n",
        "\n",
        "        # Create a DataFrame for the pairwise combinations\n",
        "        df_pairwise = pd.DataFrame({\n",
        "            'Combined Codes': combined_codes,\n",
        "            'Combined Names': combined_names,\n",
        "            'Combined Price Before Discount': combined_prices_before,\n",
        "            'Combined Price After Discount': combined_prices_after,\n",
        "            'Description': combined_descriptions,\n",
        "            'Case Label': case_labels\n",
        "        })\n",
        "\n",
        "        # Add discount percentage column\n",
        "        df_pairwise['Discount Percentage'] = (\n",
        "            (df_pairwise['Combined Price Before Discount'] - df_pairwise['Combined Price After Discount'])\n",
        "            / df_pairwise['Combined Price Before Discount']\n",
        "        ) * 100\n",
        "\n",
        "        return df_pairwise\n",
        "\n",
        "    # Generate pairwise combinations for case1 within itself without repetition\n",
        "    case1_combination_df = generate_pairwise_combinations_no_repetition(case1_data, case1_data, 'case1', allow_self_combine=False)\n",
        "\n",
        "    # Generate pairwise combinations for case1.1 within itself without repetition\n",
        "    case1_1_combination_df = generate_pairwise_combinations_no_repetition(case1_1_data, case1_1_data, 'case1.1', allow_self_combine=False)\n",
        "\n",
        "    # Generate pairwise combinations between case2 and case2.1 (no repetition required here)\n",
        "    case2_combination_df = generate_pairwise_combinations_no_repetition(case2_data, case2_1_data, 'case2 and case2.1', allow_self_combine=False)\n",
        "\n",
        "    # Combine everything into one DataFrame\n",
        "    final_combined_df = pd.concat([case1_combination_df, case1_1_combination_df, case2_combination_df], ignore_index=True)\n",
        "\n",
        "    # Save the final result to an Excel file\n",
        "    final_output_path = \"Final_Combined_Sheet.xlsx\"\n",
        "    final_combined_df.to_excel(final_output_path, index=False)\n",
        "\n",
        "    return final_output_path\n",
        "\n",
        "# Example usage:\n",
        "file_path = \"/content/عروض شهر سبتمبر 2024 مالية.xlsx\"  # Replace with the path to your Excel file\n",
        "output_path = process_excel_file(file_path)\n",
        "print(f\"Final result saved to: {output_path}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "id": "g5r-DMVN17g4",
        "outputId": "19baeb54-407e-44c3-f235-31e3da8dae2c"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "too many values to unpack (expected 2)",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-18-43a1796d78ed>\u001b[0m in \u001b[0;36m<cell line: 84>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     82\u001b[0m \u001b[0;31m# Example usage:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     83\u001b[0m \u001b[0mfile_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/content/عروض شهر سبتمبر 2024 مالية.xlsx\"\u001b[0m  \u001b[0;31m# Replace with the path to your Excel file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 84\u001b[0;31m \u001b[0moutput_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocess_excel_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     85\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Final result saved to: {output_path}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-18-43a1796d78ed>\u001b[0m in \u001b[0;36mprocess_excel_file\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     69\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     70\u001b[0m     \u001b[0;31m# Generate pairwise combinations between case2 and case2.1 (no repetition required here)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 71\u001b[0;31m     \u001b[0mcase2_combination_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgenerate_pairwise_combinations_no_repetition\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcase2_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcase2_1_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'case2 and case2.1'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_self_combine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     72\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m     \u001b[0;31m# Combine everything into one DataFrame\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-18-43a1796d78ed>\u001b[0m in \u001b[0;36mgenerate_pairwise_combinations_no_repetition\u001b[0;34m(caseA_data, caseB_data, case_label, allow_self_combine)\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m         \u001b[0;31m# Iterate over each unique product pair and combine them\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 31\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0midxA\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproduct_caseA\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0midxB\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproduct_caseB\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpairs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     32\u001b[0m             \u001b[0;31m# Combine each product from caseA with each product from caseB\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m             \u001b[0mcode_comb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"{product_caseA['مرجع داخلي']}, {product_caseB['مرجع داخلي']}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: too many values to unpack (expected 2)"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from itertools import combinations\n",
        "\n",
        "# Function to process the Excel file and generate the final result\n",
        "def process_excel_file(file_path):\n",
        "    # Load the Excel file\n",
        "    data = pd.read_excel(file_path, sheet_name='العطور والبخور')  # Load the correct sheet\n",
        "\n",
        "    # Filter rows for case1, case1.1, case2, and case2.1\n",
        "    case1_data = data[data['Status'] == 'case1']\n",
        "    case1_1_data = data[data['Status'] == 'case1.1']\n",
        "    case2_data = data[data['Status'] == 'case2']\n",
        "    case2_1_data = data[data['Status'] == 'case2.1']\n",
        "\n",
        "    # Function to generate pairwise combinations without repetition\n",
        "    def generate_pairwise_combinations_no_repetition(caseA_data, caseB_data, case_label, allow_self_combine=False):\n",
        "        combined_codes = []\n",
        "        combined_names = []\n",
        "        combined_prices_before = []\n",
        "        combined_prices_after = []\n",
        "        combined_descriptions = []\n",
        "        case_labels = []\n",
        "\n",
        "        # Get all unique pair combinations (no repetition like A,B and B,A or self-combination unless allowed)\n",
        "        if caseA_data.equals(caseB_data) and not allow_self_combine:\n",
        "            # Get pair combinations from the same dataset, excluding repetitions\n",
        "            pairs = combinations(caseA_data.iterrows(), 2)\n",
        "        else:\n",
        "            # Pair every row from caseA with every row from caseB\n",
        "            pairs = [(rowA, rowB) for _, rowA in caseA_data.iterrows() for _, rowB in caseB_data.iterrows()]\n",
        "\n",
        "        # Iterate over each unique product pair and combine them\n",
        "        for product_caseA, product_caseB in pairs:\n",
        "            # Combine each product from caseA with each product from caseB\n",
        "            code_comb = f\"{product_caseA['مرجع داخلي']}, {product_caseB['مرجع داخلي']}\"\n",
        "            name_comb = f\"{product_caseA['الاسم']} + {product_caseB['الاسم']}\"\n",
        "            price_before_comb = product_caseA['السعر قبل الخصم ش.ض'] + product_caseB['السعر قبل الخصم ش.ض']\n",
        "            price_after_comb = product_caseA['السعر بعد الخصم ش.ض'] + product_caseB['السعر بعد الخصم ش.ض']\n",
        "            description_comb = f\"{product_caseA['الوصف']} + {product_caseB['الوصف']}\"\n",
        "\n",
        "            combined_codes.append(code_comb)\n",
        "            combined_names.append(name_comb)\n",
        "            combined_prices_before.append(price_before_comb)\n",
        "            combined_prices_after.append(price_after_comb)\n",
        "            combined_descriptions.append(description_comb)\n",
        "            case_labels.append(case_label)\n",
        "\n",
        "        # Create a DataFrame for the pairwise combinations\n",
        "        df_pairwise = pd.DataFrame({\n",
        "            'Combined Codes': combined_codes,\n",
        "            'Combined Names': combined_names,\n",
        "            'Combined Price Before Discount': combined_prices_before,\n",
        "            'Combined Price After Discount': combined_prices_after,\n",
        "            'Description': combined_descriptions,\n",
        "            'Case Label': case_labels\n",
        "        })\n",
        "\n",
        "        # Add discount percentage column\n",
        "        df_pairwise['Discount Percentage'] = (\n",
        "            (df_pairwise['Combined Price Before Discount'] - df_pairwise['Combined Price After Discount'])\n",
        "            / df_pairwise['Combined Price Before Discount']\n",
        "        ) * 100\n",
        "\n",
        "        return df_pairwise\n",
        "\n",
        "    # Generate pairwise combinations for case1 within itself without repetition\n",
        "    case1_combination_df = generate_pairwise_combinations_no_repetition(case1_data, case1_data, 'case1', allow_self_combine=False)\n",
        "\n",
        "    # Generate pairwise combinations for case1.1 within itself without repetition\n",
        "    case1_1_combination_df = generate_pairwise_combinations_no_repetition(case1_1_data, case1_1_data, 'case1.1', allow_self_combine=False)\n",
        "\n",
        "    # Generate pairwise combinations between case2 and case2.1 (no repetition required here)\n",
        "    case2_combination_df = generate_pairwise_combinations_no_repetition(case2_data, case2_1_data, 'case2 and case2.1', allow_self_combine=False)\n",
        "\n",
        "    # Combine everything into one DataFrame\n",
        "    final_combined_df = pd.concat([case1_combination_df, case1_1_combination_df, case2_combination_df], ignore_index=True)\n",
        "\n",
        "    # Save the final result to an Excel file\n",
        "    final_output_path = \"Final_Combined_Sheet.xlsx\"\n",
        "    final_combined_df.to_excel(final_output_path, index=False)\n",
        "\n",
        "    return final_output_path\n",
        "\n",
        "# Example usage:\n",
        "file_path = \"/content/عروض شهر سبتمبر 2024 مالية.xlsx\"  # Replace with the path to your Excel file\n",
        "output_path = process_excel_file(file_path)\n",
        "print(f\"Final result saved to: {output_path}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "id": "d8Y4HF9i2Tn0",
        "outputId": "ccde08cc-8769-4fa3-f15b-62b83774e65c"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "tuple indices must be integers or slices, not str",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-20-5bd9b97e7233>\u001b[0m in \u001b[0;36m<cell line: 86>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     84\u001b[0m \u001b[0;31m# Example usage:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0mfile_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/content/عروض شهر سبتمبر 2024 مالية.xlsx\"\u001b[0m  \u001b[0;31m# Replace with the path to your Excel file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 86\u001b[0;31m \u001b[0moutput_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocess_excel_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     87\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Final result saved to: {output_path}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-20-5bd9b97e7233>\u001b[0m in \u001b[0;36mprocess_excel_file\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m     \u001b[0;31m# Generate pairwise combinations for case1 within itself without repetition\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m     \u001b[0mcase1_combination_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgenerate_pairwise_combinations_no_repetition\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcase1_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcase1_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'case1'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_self_combine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m     \u001b[0;31m# Generate pairwise combinations for case1.1 within itself without repetition\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-20-5bd9b97e7233>\u001b[0m in \u001b[0;36mgenerate_pairwise_combinations_no_repetition\u001b[0;34m(caseA_data, caseB_data, case_label, allow_self_combine)\u001b[0m\n\u001b[1;32m     33\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mproduct_caseA\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproduct_caseB\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpairs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m             \u001b[0;31m# Combine each product from caseA with each product from caseB\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 35\u001b[0;31m             \u001b[0mcode_comb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"{product_caseA['مرجع داخلي']}, {product_caseB['مرجع داخلي']}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     36\u001b[0m             \u001b[0mname_comb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"{product_caseA['الاسم']} + {product_caseB['الاسم']}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m             \u001b[0mprice_before_comb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mproduct_caseA\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'السعر قبل الخصم ش.ض'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mproduct_caseB\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'السعر قبل الخصم ش.ض'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: tuple indices must be integers or slices, not str"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from itertools import combinations\n",
        "\n",
        "# Function to process the Excel file and generate the final result\n",
        "def process_excel_file(file_path):\n",
        "    # Load the Excel file\n",
        "    data = pd.read_excel(file_path, sheet_name='العطور والبخور')  # Load the correct sheet\n",
        "\n",
        "    # Filter rows for case1, case1.1, case2, and case2.1\n",
        "    case1_data = data[data['Status'] == 'case1']\n",
        "    case1_1_data = data[data['Status'] == 'case1.1']\n",
        "    case2_data = data[data['Status'] == 'case2']\n",
        "    case2_1_data = data[data['Status'] == 'case2.1']\n",
        "\n",
        "    # Function to generate pairwise combinations without repetition\n",
        "    def generate_pairwise_combinations_no_repetition(caseA_data, caseB_data, case_label, allow_self_combine=False):\n",
        "        combined_codes = []\n",
        "        combined_names = []\n",
        "        combined_prices_before = []\n",
        "        combined_prices_after = []\n",
        "        combined_descriptions = []\n",
        "        case_labels = []\n",
        "\n",
        "        # Get all unique pair combinations (no repetition like A,B and B,A or self-combination unless allowed)\n",
        "        if caseA_data.equals(caseB_data) and not allow_self_combine:\n",
        "            # Get pair combinations from the same dataset, excluding repetitions\n",
        "            pairs = combinations(caseA_data.iterrows(), 2)\n",
        "        else:\n",
        "            # Pair every row from caseA with every row from caseB\n",
        "            pairs = [(rowA, rowB) for _, rowA in caseA_data.iterrows() for _, rowB in caseB_data.iterrows()]\n",
        "\n",
        "        # Iterate over each unique product pair and combine them\n",
        "        for product_caseA, product_caseB in pairs:\n",
        "            # product_caseA and product_caseB are tuples, where the second element is the actual row\n",
        "            product_caseA = product_caseA[1]  # Access the actual row\n",
        "            product_caseB = product_caseB[1]  # Access the actual row\n",
        "\n",
        "            # Combine each product from caseA with each product from caseB\n",
        "            code_comb = f\"{product_caseA['مرجع داخلي']}, {product_caseB['مرجع داخلي']}\"\n",
        "            name_comb = f\"{product_caseA['الاسم']} + {product_caseB['الاسم']}\"\n",
        "            price_before_comb = product_caseA['السعر قبل الخصم ش.ض'] + product_caseB['السعر قبل الخصم ش.ض']\n",
        "            price_after_comb = product_caseA['السعر بعد الخصم ش.ض'] + product_caseB['السعر بعد الخصم ش.ض']\n",
        "            description_comb = f\"{product_caseA['الوصف']} + {product_caseB['الوصف']}\"\n",
        "\n",
        "            combined_codes.append(code_comb)\n",
        "            combined_names.append(name_comb)\n",
        "            combined_prices_before.append(price_before_comb)\n",
        "            combined_prices_after.append(price_after_comb)\n",
        "            combined_descriptions.append(description_comb)\n",
        "            case_labels.append(case_label)\n",
        "\n",
        "        # Create a DataFrame for the pairwise combinations\n",
        "        df_pairwise = pd.DataFrame({\n",
        "            'Combined Codes': combined_codes,\n",
        "            'Combined Names': combined_names,\n",
        "            'Combined Price Before Discount': combined_prices_before,\n",
        "            'Combined Price After Discount': combined_prices_after,\n",
        "            'Description': combined_descriptions,\n",
        "            'Case Label': case_labels\n",
        "        })\n",
        "\n",
        "        # Add discount percentage column\n",
        "        df_pairwise['Discount Percentage'] = (\n",
        "            (df_pairwise['Combined Price Before Discount'] - df_pairwise['Combined Price After Discount'])\n",
        "            / df_pairwise['Combined Price Before Discount']\n",
        "        ) * 100\n",
        "\n",
        "        return df_pairwise\n",
        "\n",
        "    # Generate pairwise combinations for case1 within itself without repetition\n",
        "    case1_combination_df = generate_pairwise_combinations_no_repetition(case1_data, case1_data, 'case1', allow_self_combine=False)\n",
        "\n",
        "    # Generate pairwise combinations for case1.1 within itself without repetition\n",
        "    case1_1_combination_df = generate_pairwise_combinations_no_repetition(case1_1_data, case1_1_data, 'case1.1', allow_self_combine=False)\n",
        "\n",
        "    # Generate pairwise combinations between case2 and case2.1 (no repetition required here)\n",
        "    case2_combination_df = generate_pairwise_combinations_no_repetition(case2_data, case2_1_data, 'case2 and case2.1', allow_self_combine=False)\n",
        "\n",
        "    # Combine everything into one DataFrame\n",
        "    final_combined_df = pd.concat([case1_combination_df, case1_1_combination_df, case2_combination_df], ignore_index=True)\n",
        "\n",
        "    # Save the final result to an Excel file\n",
        "    final_output_path = \"Final_Combined_Sheet.xlsx\"\n",
        "    final_combined_df.to_excel(final_output_path, index=False)\n",
        "\n",
        "    return final_output_path\n",
        "\n",
        "# Example usage:\n",
        "file_path = \"/content/عروض شهر سبتمبر 2024 مالية.xlsx\"  # Replace with the path to your Excel file\n",
        "output_path = process_excel_file(file_path)\n",
        "print(f\"Final result saved to: {output_path}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 515
        },
        "id": "RnGw_sMe21Mj",
        "outputId": "4e195702-cac1-4421-b5cc-2fffd30a437b"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-21-7096532aebcf>:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  product_caseA = product_caseA[1]  # Access the actual row\n",
            "<ipython-input-21-7096532aebcf>:36: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  product_caseB = product_caseB[1]  # Access the actual row\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "'int' object is not subscriptable",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-21-7096532aebcf>\u001b[0m in \u001b[0;36m<cell line: 90>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     88\u001b[0m \u001b[0;31m# Example usage:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     89\u001b[0m \u001b[0mfile_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/content/عروض شهر سبتمبر 2024 مالية.xlsx\"\u001b[0m  \u001b[0;31m# Replace with the path to your Excel file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 90\u001b[0;31m \u001b[0moutput_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocess_excel_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     91\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Final result saved to: {output_path}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-21-7096532aebcf>\u001b[0m in \u001b[0;36mprocess_excel_file\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m     \u001b[0;31m# Generate pairwise combinations between case2 and case2.1 (no repetition required here)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m     \u001b[0mcase2_combination_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgenerate_pairwise_combinations_no_repetition\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcase2_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcase2_1_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'case2 and case2.1'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_self_combine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m     \u001b[0;31m# Combine everything into one DataFrame\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-21-7096532aebcf>\u001b[0m in \u001b[0;36mgenerate_pairwise_combinations_no_repetition\u001b[0;34m(caseA_data, caseB_data, case_label, allow_self_combine)\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m             \u001b[0;31m# Combine each product from caseA with each product from caseB\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m             \u001b[0mcode_comb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"{product_caseA['مرجع داخلي']}, {product_caseB['مرجع داخلي']}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m             \u001b[0mname_comb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"{product_caseA['الاسم']} + {product_caseB['الاسم']}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m             \u001b[0mprice_before_comb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mproduct_caseA\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'السعر قبل الخصم ش.ض'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mproduct_caseB\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'السعر قبل الخصم ش.ض'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: 'int' object is not subscriptable"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from itertools import combinations\n",
        "\n",
        "# Function to process the Excel file and generate the final result\n",
        "def process_excel_file(file_path):\n",
        "    # Load the Excel file\n",
        "    data = pd.read_excel(file_path, sheet_name='العطور والبخور')  # Load the correct sheet\n",
        "\n",
        "    # Filter rows for case1, case1.1, case2, and case2.1\n",
        "    case1_data = data[data['Status'] == 'case1']\n",
        "    case1_1_data = data[data['Status'] == 'case1.1']\n",
        "    case2_data = data[data['Status'] == 'case2']\n",
        "    case2_1_data = data[data['Status'] == 'case2.1']\n",
        "\n",
        "    # Function to generate pairwise combinations without repetition\n",
        "    def generate_pairwise_combinations_no_repetition(caseA_data, caseB_data, case_label, allow_self_combine=False):\n",
        "        combined_codes = []\n",
        "        combined_names = []\n",
        "        combined_prices_before = []\n",
        "        combined_prices_after = []\n",
        "        combined_descriptions = []\n",
        "        case_labels = []\n",
        "\n",
        "        # Get all unique pair combinations (no repetition like A,B and B,A or self-combination unless allowed)\n",
        "        if caseA_data.equals(caseB_data) and not allow_self_combine:\n",
        "            # Get pair combinations from the same dataset, excluding repetitions\n",
        "            pairs = combinations(caseA_data.iterrows(), 2)\n",
        "        else:\n",
        "            # Pair every row from caseA with every row from caseB\n",
        "            pairs = [(rowA, rowB) for _, rowA in caseA_data.iterrows() for _, rowB in caseB_data.iterrows()]\n",
        "\n",
        "        # Iterate over each unique product pair and combine them\n",
        "        for (_, product_caseA), (_, product_caseB) in pairs:\n",
        "            # Combine each product from caseA with each product from caseB\n",
        "            code_comb = f\"{product_caseA['مرجع داخلي']}, {product_caseB['مرجع داخلي']}\"\n",
        "            name_comb = f\"{product_caseA['الاسم']} + {product_caseB['الاسم']}\"\n",
        "            price_before_comb = product_caseA['السعر قبل الخصم ش.ض'] + product_caseB['السعر قبل الخصم ش.ض']\n",
        "            price_after_comb = product_caseA['السعر بعد الخصم ش.ض'] + product_caseB['السعر بعد الخصم ش.ض']\n",
        "            description_comb = f\"{product_caseA['الوصف']} + {product_caseB['الوصف']}\"\n",
        "\n",
        "            combined_codes.append(code_comb)\n",
        "            combined_names.append(name_comb)\n",
        "            combined_prices_before.append(price_before_comb)\n",
        "            combined_prices_after.append(price_after_comb)\n",
        "            combined_descriptions.append(description_comb)\n",
        "            case_labels.append(case_label)\n",
        "\n",
        "        # Create a DataFrame for the pairwise combinations\n",
        "        df_pairwise = pd.DataFrame({\n",
        "            'Combined Codes': combined_codes,\n",
        "            'Combined Names': combined_names,\n",
        "            'Combined Price Before Discount': combined_prices_before,\n",
        "            'Combined Price After Discount': combined_prices_after,\n",
        "            'Description': combined_descriptions,\n",
        "            'Case Label': case_labels\n",
        "        })\n",
        "\n",
        "        # Add discount percentage column\n",
        "        df_pairwise['Discount Percentage'] = (\n",
        "            (df_pairwise['Combined Price Before Discount'] - df_pairwise['Combined Price After Discount'])\n",
        "            / df_pairwise['Combined Price Before Discount']\n",
        "        ) * 100\n",
        "\n",
        "        return df_pairwise\n",
        "\n",
        "    # Generate pairwise combinations for case1 within itself without repetition\n",
        "    case1_combination_df = generate_pairwise_combinations_no_repetition(case1_data, case1_data, 'case1', allow_self_combine=False)\n",
        "\n",
        "    # Generate pairwise combinations for case1.1 within itself without repetition\n",
        "    case1_1_combination_df = generate_pairwise_combinations_no_repetition(case1_1_data, case1_1_data, 'case1.1', allow_self_combine=False)\n",
        "\n",
        "    # Generate pairwise combinations between case2 and case2.1 (no repetition required here)\n",
        "    case2_combination_df = generate_pairwise_combinations_no_repetition(case2_data, case2_1_data, 'case2 and case2.1', allow_self_combine=False)\n",
        "\n",
        "    # Combine everything into one DataFrame\n",
        "    final_combined_df = pd.concat([case1_combination_df, case1_1_combination_df, case2_combination_df], ignore_index=True)\n",
        "\n",
        "    # Save the final result to an Excel file\n",
        "    final_output_path = \"Final_Combined_Sheet.xlsx\"\n",
        "    final_combined_df.to_excel(final_output_path, index=False)\n",
        "\n",
        "    return final_output_path\n",
        "\n",
        "# Example usage:\n",
        "file_path = \"/content/عروض شهر سبتمبر 2024 مالية.xlsx\"  # Replace with the path to your Excel file\n",
        "output_path = process_excel_file(file_path)\n",
        "print(f\"Final result saved to: {output_path}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "id": "Fxke0zX94aNx",
        "outputId": "ea395881-f52b-490c-c5ab-4d78c6e8f286"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "too many values to unpack (expected 2)",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-22-1b771aa4beb9>\u001b[0m in \u001b[0;36m<cell line: 86>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     84\u001b[0m \u001b[0;31m# Example usage:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0mfile_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/content/عروض شهر سبتمبر 2024 مالية.xlsx\"\u001b[0m  \u001b[0;31m# Replace with the path to your Excel file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 86\u001b[0;31m \u001b[0moutput_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocess_excel_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     87\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Final result saved to: {output_path}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-22-1b771aa4beb9>\u001b[0m in \u001b[0;36mprocess_excel_file\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m     \u001b[0;31m# Generate pairwise combinations between case2 and case2.1 (no repetition required here)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 73\u001b[0;31m     \u001b[0mcase2_combination_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgenerate_pairwise_combinations_no_repetition\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcase2_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcase2_1_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'case2 and case2.1'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_self_combine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m     \u001b[0;31m# Combine everything into one DataFrame\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-22-1b771aa4beb9>\u001b[0m in \u001b[0;36mgenerate_pairwise_combinations_no_repetition\u001b[0;34m(caseA_data, caseB_data, case_label, allow_self_combine)\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m         \u001b[0;31m# Iterate over each unique product pair and combine them\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproduct_caseA\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproduct_caseB\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpairs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m             \u001b[0;31m# Combine each product from caseA with each product from caseB\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m             \u001b[0mcode_comb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"{product_caseA['مرجع داخلي']}, {product_caseB['مرجع داخلي']}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: too many values to unpack (expected 2)"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DE_hmQeADa-K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Promotions**"
      ],
      "metadata": {
        "id": "uJZHMBsBEjMA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from itertools import combinations\n",
        "\n",
        "# Function to process the Excel file and generate the final result\n",
        "def process_excel_file(file_path):\n",
        "    # Load the Excel file\n",
        "    data = pd.read_excel(file_path, sheet_name='العطور والبخور')  # Load the correct sheet\n",
        "\n",
        "    # Filter rows for case1, case1.1, case2, and case2.1\n",
        "    case1_data = data[data['Status'] == 'case1']\n",
        "    case1_1_data = data[data['Status'] == 'case1.1']\n",
        "    case2_data = data[data['Status'] == 'case2']\n",
        "    case2_1_data = data[data['Status'] == 'case2.1']\n",
        "\n",
        "    # Function to generate pairwise combinations without repetition\n",
        "    def generate_pairwise_combinations_no_repetition(caseA_data, caseB_data, case_label, allow_self_combine=False):\n",
        "        combined_codes = []\n",
        "        combined_names = []\n",
        "        combined_prices_before = []\n",
        "        combined_prices_after = []\n",
        "        combined_descriptions = []\n",
        "        case_labels = []\n",
        "\n",
        "        # Get all unique pair combinations (no repetition like A,B and B,A or self-combination unless allowed)\n",
        "        if caseA_data.equals(caseB_data) and not allow_self_combine:\n",
        "            # Get pair combinations from the same dataset, excluding repetitions\n",
        "            pairs = combinations(caseA_data.iterrows(), 2)\n",
        "        else:\n",
        "            # Pair every row from caseA with every row from caseB\n",
        "            pairs = [(rowA, rowB) for rowA in caseA_data.iterrows() for rowB in caseB_data.iterrows()]\n",
        "\n",
        "        # Iterate over each unique product pair and combine them\n",
        "        for (idxA, product_caseA), (idxB, product_caseB) in pairs:\n",
        "            # Combine each product from caseA with each product from caseB\n",
        "            code_comb = f\"{product_caseA['مرجع داخلي']}, {product_caseB['مرجع داخلي']}\"\n",
        "            name_comb = f\"{product_caseA['الاسم']} + {product_caseB['الاسم']}\"\n",
        "            price_before_comb = product_caseA['السعر قبل الخصم ش.ض'] + product_caseB['السعر قبل الخصم ش.ض']\n",
        "            price_after_comb = product_caseA['السعر بعد الخصم ش.ض'] + product_caseB['السعر بعد الخصم ش.ض']\n",
        "            description_comb = f\"{product_caseA['الوصف']} + {product_caseB['الوصف']}\"\n",
        "\n",
        "            combined_codes.append(code_comb)\n",
        "            combined_names.append(name_comb)\n",
        "            combined_prices_before.append(price_before_comb)\n",
        "            combined_prices_after.append(price_after_comb)\n",
        "            combined_descriptions.append(description_comb)\n",
        "            case_labels.append(case_label)\n",
        "\n",
        "        # Create a DataFrame for the pairwise combinations\n",
        "        df_pairwise = pd.DataFrame({\n",
        "            'Combined Codes': combined_codes,\n",
        "            'Combined Names': combined_names,\n",
        "            'Combined Price Before Discount': combined_prices_before,\n",
        "            'Combined Price After Discount': combined_prices_after,\n",
        "            'Description': combined_descriptions,\n",
        "            'Case Label': case_labels\n",
        "        })\n",
        "\n",
        "        # Add discount percentage column\n",
        "        df_pairwise['Discount Percentage'] = (\n",
        "            (df_pairwise['Combined Price Before Discount'] - df_pairwise['Combined Price After Discount'])\n",
        "            / df_pairwise['Combined Price Before Discount']\n",
        "        ) * 100\n",
        "\n",
        "        return df_pairwise\n",
        "\n",
        "    # Generate pairwise combinations for case1 within itself without repetition\n",
        "    case1_combination_df = generate_pairwise_combinations_no_repetition(case1_data, case1_data, 'case1', allow_self_combine=False)\n",
        "\n",
        "    # Generate pairwise combinations for case1.1 within itself without repetition\n",
        "    case1_1_combination_df = generate_pairwise_combinations_no_repetition(case1_1_data, case1_1_data, 'case1.1', allow_self_combine=False)\n",
        "\n",
        "    # Generate pairwise combinations between case2 and case2.1 (no repetition required here)\n",
        "    case2_combination_df = generate_pairwise_combinations_no_repetition(case2_data, case2_1_data, 'case2 and case2.1', allow_self_combine=False)\n",
        "\n",
        "    # Combine everything into one DataFrame\n",
        "    final_combined_df = pd.concat([case1_combination_df, case1_1_combination_df, case2_combination_df], ignore_index=True)\n",
        "\n",
        "    # Save the final result to an Excel file\n",
        "    final_output_path = \"Final_Combined_Sheet.xlsx\"\n",
        "    final_combined_df.to_excel(final_output_path, index=False)\n",
        "\n",
        "    return final_output_path\n",
        "\n",
        "# Example usage:\n",
        "file_path = \"/content/عروض شهر سبتمبر 2024 مالية.xlsx\"  # Replace with the path to your Excel file\n",
        "output_path = process_excel_file(file_path)\n",
        "print(f\"Final result saved to: {output_path}\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9qND1L0I4315",
        "outputId": "0dfaba0b-4a3b-4552-9cfa-7f7706653e13"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Final result saved to: Final_Combined_Sheet.xlsx\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Merged processing function for case1, case1.1, case2, and case2.1\n",
        "\n",
        "def process_all_cases_combined(file_path):\n",
        "    # Load the Excel file\n",
        "    data_alotour_new_filled = pd.read_excel(\"/content/عروض شهر سبتمبر 2024 مالية.xlsx\", sheet_name='العطور والبخور')  # Load the correct sheet\n",
        "\n",
        "    # Fill down missing values for all relevant columns\n",
        "    data_alotour_new_filled.fillna(method='ffill', inplace=True)\n",
        "\n",
        "    # Processing for case1\n",
        "    case1_data_new = data_alotour_new_filled[data_alotour_new_filled['Status'] == 'case1']\n",
        "    case1_data_new.columns = ['Status', 'Internal_Reference', 'Product_Name', 'Price_Before_Discount', 'Description', 'Price_After_Discount']\n",
        "\n",
        "    product_combinations_case1 = list(combinations(case1_data_new.itertuples(), 2))\n",
        "    combined_codes_case1 = []\n",
        "    combined_names_case1 = []\n",
        "    combined_prices_before_case1 = []\n",
        "    combined_prices_after_case1 = []\n",
        "    combined_descriptions_case1 = []\n",
        "\n",
        "    for comb in product_combinations_case1:\n",
        "        code_comb = f\"{comb[0].Internal_Reference}, {comb[1].Internal_Reference}\"\n",
        "        name_comb = f\"{comb[0].Product_Name} + {comb[1].Product_Name}\"\n",
        "        price_before_comb = comb[0].Price_Before_Discount + comb[1].Price_Before_Discount\n",
        "        price_after_comb = comb[0].Price_After_Discount + comb[1].Price_After_Discount\n",
        "        description_comb = f\"{comb[0].Description}, {comb[1].Description}\"\n",
        "\n",
        "        combined_codes_case1.append(code_comb)\n",
        "        combined_names_case1.append(name_comb)\n",
        "        combined_prices_before_case1.append(price_before_comb)\n",
        "        combined_prices_after_case1.append(price_after_comb)\n",
        "        combined_descriptions_case1.append(description_comb)\n",
        "\n",
        "    case1_combination_df_new = pd.DataFrame({\n",
        "        'Combined Codes': combined_codes_case1,\n",
        "        'Combined Names': combined_names_case1,\n",
        "        'Combined Price Before Discount': combined_prices_before_case1,\n",
        "        'Combined Price After Discount': combined_prices_after_case1,\n",
        "        'Description': combined_descriptions_case1\n",
        "    })\n",
        "\n",
        "    case1_combination_df_new['Discount Percentage'] = (\n",
        "        (case1_combination_df_new['Combined Price Before Discount'] - case1_combination_df_new['Combined Price After Discount'])\n",
        "        / case1_combination_df_new['Combined Price Before Discount']\n",
        "    ) * 100\n",
        "\n",
        "    # Processing for case1.1\n",
        "    case1_1_data_new = data_alotour_new_filled[data_alotour_new_filled['Status'] == 'case1.1']\n",
        "    case1_1_data_new.columns = ['Status', 'Internal_Reference', 'Product_Name', 'Price_Before_Discount', 'Description', 'Price_After_Discount']\n",
        "\n",
        "    product_combinations_case1_1 = list(combinations(case1_1_data_new.itertuples(), 2))\n",
        "    combined_codes_case1_1 = []\n",
        "    combined_names_case1_1 = []\n",
        "    combined_prices_before_case1_1 = []\n",
        "    combined_prices_after_case1_1 = []\n",
        "    combined_descriptions_case1_1 = []\n",
        "\n",
        "    for comb in product_combinations_case1_1:\n",
        "        code_comb = f\"{comb[0].Internal_Reference}, {comb[1].Internal_Reference}\"\n",
        "        name_comb = f\"{comb[0].Product_Name} + {comb[1].Product_Name}\"\n",
        "        price_before_comb = comb[0].Price_Before_Discount + comb[1].Price_Before_Discount\n",
        "        price_after_comb = comb[0].Price_After_Discount + comb[1].Price_After_Discount\n",
        "        description_comb = f\"{comb[0].Description}, {comb[1].Description}\"\n",
        "\n",
        "        combined_codes_case1_1.append(code_comb)\n",
        "        combined_names_case1_1.append(name_comb)\n",
        "        combined_prices_before_case1_1.append(price_before_comb)\n",
        "        combined_prices_after_case1_1.append(price_after_comb)\n",
        "        combined_descriptions_case1_1.append(description_comb)\n",
        "\n",
        "    case1_1_combination_df_new = pd.DataFrame({\n",
        "        'Combined Codes': combined_codes_case1_1,\n",
        "        'Combined Names': combined_names_case1_1,\n",
        "        'Combined Price Before Discount': combined_prices_before_case1_1,\n",
        "        'Combined Price After Discount': combined_prices_after_case1_1,\n",
        "        'Description': combined_descriptions_case1_1\n",
        "    })\n",
        "\n",
        "    case1_1_combination_df_new['Discount Percentage'] = (\n",
        "        (case1_1_combination_df_new['Combined Price Before Discount'] - case1_1_combination_df_new['Combined Price After Discount'])\n",
        "        / case1_1_combination_df_new['Combined Price Before Discount']\n",
        "    ) * 100\n",
        "\n",
        "    # Processing for case2 and case2.1 (only combine between case2 and case2.1)\n",
        "    case2_data_new = data_alotour_new_filled[data_alotour_new_filled['Status'] == 'case2'].head(8)\n",
        "    case2_1_data_new = data_alotour_new_filled[data_alotour_new_filled['Status'] == 'case2.1'].head(4)\n",
        "\n",
        "    combined_codes_case2 = []\n",
        "    combined_names_case2 = []\n",
        "    combined_prices_before_case2 = []\n",
        "    combined_prices_after_case2 = []\n",
        "    combined_descriptions_case2 = []\n",
        "\n",
        "    for product_case2 in case2_data_new.itertuples(index=False):  # Ensure only 8 products from case2\n",
        "        for product_case2_1 in case2_1_data_new.itertuples(index=False):  # Ensure only 4 products from case2.1\n",
        "            code_comb = f\"{product_case2[1]}, {product_case2_1[1]}\"\n",
        "            name_comb = f\"{product_case2[2]} + {product_case2_1[2]}\"\n",
        "            price_before_comb = product_case2[3] + product_case2_1[3]\n",
        "            price_after_comb = product_case2[5] + product_case2_1[5]\n",
        "            description_comb = f\"{product_case2[4]}\"\n",
        "\n",
        "            combined_codes_case2.append(code_comb)\n",
        "            combined_names_case2.append(name_comb)\n",
        "            combined_prices_before_case2.append(price_before_comb)\n",
        "            combined_prices_after_case2.append(price_after_comb)\n",
        "            combined_descriptions_case2.append(description_comb)\n",
        "\n",
        "    case2_combination_df_fixed = pd.DataFrame({\n",
        "        'Combined Codes': combined_codes_case2,\n",
        "        'Combined Names': combined_names_case2,\n",
        "        'Combined Price Before Discount': combined_prices_before_case2,\n",
        "        'Combined Price After Discount': combined_prices_after_case2,\n",
        "        'Description': combined_descriptions_case2\n",
        "    })\n",
        "\n",
        "    case2_combination_df_fixed['Discount Percentage'] = (\n",
        "        (case2_combination_df_fixed['Combined Price Before Discount'] - case2_combination_df_fixed['Combined Price After Discount'])\n",
        "        / case2_combination_df_fixed['Combined Price Before Discount']\n",
        "    ) * 100\n",
        "\n",
        "    # Combine all datasets: case1, case1.1, and case2+case2.1\n",
        "    final_combined_df = pd.concat([case1_combination_df_new, case1_1_combination_df_new, case2_combination_df_fixed], ignore_index=True)\n",
        "\n",
        "    # Save the final result to an Excel file\n",
        "    final_output_path = \"Final_All_Cases_Combined_Output.xlsx\"\n",
        "    final_combined_df.to_excel(final_output_path, index=False)\n",
        "\n",
        "    return final_output_path\n",
        "\n",
        "# Re-run the combined processing for case1, case1.1, case2, and case2.1\n",
        "final_all_cases_combined_output_path = process_all_cases_combined(\"Final_All_Cases_Combined_Output.xlsx\")\n",
        "final_all_cases_combined_output_path\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "id": "EOGSdc5q5T80",
        "outputId": "89275418-efa5-4dd1-f233-300f9f887138"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-29-519bed8052f0>:8: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
            "  data_alotour_new_filled.fillna(method='ffill', inplace=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Final_All_Cases_Combined_Output.xlsx'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "VbnaxJp0Eb5I"
      }
    }
  ]
}